source('krige.R')
ls()
debug
devtools::load_all('/data/ripums/')
summary(dfrrIpums $svi)
summary(dfrIpums $svi)
krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm(0.003, 'Exp', 400, 0.003),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE)

summary(spCells)
summary(spCells @data)
str(src)
src
summary(src @data)
src @data[is.na(src @data $svi), ]
summary(src @data[is.na(src @data $svi), ])
table(src @data $GEOLEVEL2)
table(as.character(src @data $GEOLEVEL2))
summary(src @data)
Q
ls()
summary(dfrIpums)
spGl2
summary(dfrIpums $GEOLEVEL2 %in% spGl2 $GEOLEVEL2)
sum(dfrIpums $GEOLEVEL2 %in% spGl2 $GEOLEVEL2)
summary(dfrIpums $GEOLEV2 %in% spGl2 $GEOLEVEL2)
summary(as.character(dfrIpums $GEOLEV2) %in% spGl2 $GEOLEVEL2)
summary(dfrIpuums[!dfrIpums $GEOLEV2 %in% spGl2 $GEOLEVEL2, ])
summary(dfrIpums[!dfrIpums $GEOLEV2 %in% spGl2 $GEOLEVEL2, ])
nrow(dfrIpums)
dfrIpums2 <- dfrIpums
data(dfrIpums)
nrow(dfrIpums)
dfrIpums $svi <- dfrSvi $svi[match(dfrIpums $SERIAL, dfrSvi $key)]
summary(dfrIpums)
table(as.character(dfrIpums $GEOLEV2))
summary(dfrIpums[is.na(dfrIpums $svi), ])
table(as.character(dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2)
)
table(as.character(dfrIpums[dfrIpums $GEOLEV2 %in% dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2, ]))
c
q()
n
source('krige.R')
source('krige.R')
table(as.character(with(dfrIpums, dfrIpums[GEOLEV2 %in% dfrIpums[!is.na(svi), ] $GEOLEV2, ] $GEOLEV2)))
data.frame(as.character(with(dfrIpums, dfrIpums[GEOLEV2 %in% dfrIpums[!is.na(svi), ] $GEOLEV2, ] $GEOLEV2)))
dfrBadGEOLEV2 <- as.data.frame(table(as.character(with(dfrIpums, dfrIpums[GEOLEV2 %in% dfrIpums[!is.na(svi), ] $GEOLEV2, ] $GEOLEV2))))
dfrBadGl2 <- dfrBadGEOLEV2
rm(dfrBadGEOLEV2)
head(dfrBadGl2)
dfrBadGl2 <- as.data.frame(table(as.character(with(dfrIpums, dfrIpums[GEOLEV2 %in% dfrIpums[is.na(svi), ] $GEOLEV2, ] $GEOLEV2))))
head(dfrBadGl2)
gl2Bad <- dfrIpums[is.na(svi), ] $GEOLEV2
gl2Bad <- dfrIpums[is.na(dfrIpum $svi), ] $GEOLEV2
gl2Bad <- dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2
gl2Bad <- unique(dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2)
gl2Bad2 <- dfrIpums[dfrIpums $GEOLEV2 %in% gl2Bad, ] $GEOLEV2
summary(gl2Bad2)
head(as.data.frame(table(gl2Bad2)))
head(as.data.frame(dfrIpums[is.na(dfrIpums $GEOLEV2), ] $GEOLEV2))
head(as.data.frame(dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2))
head(as.data.frame(table(dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2)))
as.data.frame(table(dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2))
as.data.frame(table(gl2Bad2))
dfrIpums2 <- dfrIpums
dfrIpums <- dfrIpums[!is.na(dfrIpums $svi), ]

dfrIpums $MIG5INT <- as.numeric(dfrIpums $MIGRATE5==30)
dfrIpums $MIG5MAJ <- as.numeric(dfrIpums $MIGRATE5>19)

rstack <- rstack[[c('pop', 'ag', 'urb', 'nl', 'acc')]]
form <- svi~pop+urb+acc+nl





lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', dfrGl2, 'PERWT'))
xbar <- sapply(lWgt, function(dfrGl2) { # geolev2 weighted means
    weighted.mean(as.numeric(dfrGl2[, 'svi']), dfrGl2 $wtFreq, na.rm=TRUE)
})

str(xbar)
summary(spGl2 $GEOLEV2 %in% names(xbar))
spGl2
summary(spGl2 $GEOLEVEL2 %in% names(xbar))
spGl2[!(spGl2 $GEOLEVEL2 %in% names(xbar)), ] $GEOLEVEL2
gl2Bad3 <- dfrIpums[is.na(dfrIpums $svi), ] $GEOLEV2
spGl2[!(spGl2 $GEOLEVEL2 %in% dfrIpums $GEOLEV2), ] $GEOLEVEL2
dfrBad <- gl2Bad2
rm(gl2Bad2)
rm(gl2Bad3)
spGl2[!(spGl2 $GEOLEVEL2 %in% dfrIpums2 $GEOLEV2), ] $GEOLEVEL2
library(rsrtm)
library(rlandscan)
library(rvisnav)
library(rsoils)
rDem <- rsrtm::srtm(country='Korea')
rDem <- rsrtm::srtm(country='South Korea')
rPop <- rlandscan::landscan(country='South Korea')
rLcove <- rvisnav::visnav(country='South Korea')
rLc <- rLcove
rm(rLove)
rm(rLcove)
rSoils <- rsoils::soils(country='South Korea')
rDem
rLc
ls())
ls())
ls()
rPop
q()
n
source('krige.R')
traceback()
source('krige.R')
traceback()
source('krige.R')
traceback()
source('krige.R')
summary(dfrIpums)
data(dfrIpums)
summary(dfrIpums)
iiMiss <- ripums::setMissing()
summary(iiMiss)
uu
source('krige.R')
ls()
source('krige.R')
ls()
save(X, x0, s, s0, V, v0, c0, file='~/Desktop/browserKrige.RData')
save(X, x0, s, s0, V, v0, c0, beta, file='~/Desktop/browserKrige.RData')
q()
Q
q()
n
q()
n
library(ripums)
data()
q()
n
source('krige.R')
source('krige.R')
list.files()
load('../../../browserKrige.RData')
ls()
beta
krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm(0.003, 'Exp', 400, 0.003),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE, beta=beta)

workdir
save(krigeSvi, file=file.path(workdir, 'krigeSvi.RData'))
colorRampPalette(c('blue', 'white', 'red'))
colorRampPalette(c('blue', 'white', 'red'))(64)
q()
n
exp(1:14)
exp(14)
library(rlandscan)
rlandscan::landscan(fips='05')
fips <- paste0('01', sprintf('02d%', 1:999))
fips <- paste0('01', sprintf('%02d', 1:999))
fips
rlandscan::landscan(fips=fips)
rlandscan::landscan(fips='01001')
library(raster)
rFoo <- rlandscan::landscan(fips='01001')
rFoo
rFoo <- rlandscan::landscan(fips=fips)
rFoo
q()
n
pwd()
list.files()
setwd('..')
getwd()
source('R/resample.R')
source('R/resample.R')
tmpfiles[2]
raster::raster(tmpfiles[2])
gdalUtils::gdalwarp(tmpfiles[2], file.path(datadir, names(tmpfiles)[2]),
                    te=te, tr=tr, tap=tap, r='near')
gdalUtils::gdalwarp(tmpfiles[2], file.path(datadir, names(tmpfiles)[2]),
                    te=te, tr=tr, tap=tap, r='near')
workdir <- '/home/cmarmstrong/Desktop/' # Sys.getenv('WORKDIR')
datadir <- file.path(workdir, 'armstrong18', 'inst', 'tif', 'PHL') # c('PHL', 'ZAF')

paths <- file.path(datadir, list.files(datadir, pattern='\\.tif$'))

paths
lR <- lapply(paths, raster::raster)
aR <- sapply(lR, names)
mR <- sapply(unique(aR), '==', aR)
lR <- apply(mR, 2, function(J) {
    if(sum(J)>1) return(do.call(raster::merge, c(lR[J], tolerance=0.5)))
    else return(lR[[which(J)]])
})

lR
acc
dfr
getwd()
source('R/krige.R')
rstack
lLc
q()
n
