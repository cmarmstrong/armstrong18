rstack
lc
source('R/krige.R')
traceback()
ls()
head(dfrGl2)
head(dfrIpums)
names(dfrIpums)
lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', 'PERWT', dfrGl2))
head(as.data.frame(ftable(as.formula(paste0('svi', '~', 'PERWT')), dfrIpums)))
ls()
dfr
dfr <- as.data.frame(ftable(as.formula(paste0('svi', '~', 'PERWT')), dfrIpums))
dfr[, 'PERWT'] <- with(dfr, as.numeric(levels(get('PERWT')))[get('PERWT')])
myWeight <- 'PERWT'
dfr $wtFreq <- with(dfr, Freq * get(myWeight))
dfr <- with(dfr, aggregate(wtFreq~get('svi'), FUN=sum))
head(dfr)
lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) {
    browser()
    weight('svi', 'PERWT', dfrGl2)})
head(dfrGl2)
head(weight('svi', 'PERWT', dfrGl2))
names(dfrGl2)
class(dfrGl2)
weight('svi', weight='PERWT', dfrGl2)
weight('svi', weight='PERWT', dfr=dfrGl2)
ripums::weight('svi', weight='PERWT', dfr=dfrGl2)
Q
q()
n
ls()
library(devtools)
devtools::load_all('/data/ripums/')
source('R/krige.R')
dfr <- as.data.frame(ftable(as.formula(paste0(x, '~', weight)), dfr))
source('R/krige.R')
head(dfr)
sort(names(dfr))
mytab
mytab <- ftable(as.formula(paste0(x, '~', weight)), dfr)
head(mytab)
head(mytab)
mytab
ftable(as.formula(paste0(x, '~', weight)), dfr)
head(dfr)
form <- as.formula(paste0(x, '~', weight))
ftable(form, dfr)
Q
devtools::load_all('/data/ripums/')
ripums::svi(quote(dfrIpums $COUNTRY==710), TRUE)
head(dfr)
head(m)
head(m)
head(m)
nrow(m)
length(nomiss)
head(e $pca)
str(e $pca)
devtools::load_all('/data/ripums/')
source('R/krige.R')
eSvi <- ripums::svi(quote(dfrIpums $COUNTRY==710), TRUE)

head(dfrIpums)
ls()
eSvi <- ripums::svi(quote(dfrIpums $COUNTRY==710), TRUE)
vSvi <- eSvi $pca $pc %*% eSvi $pca $vt[, 1]
str(vSvi)
dfrSvi <- data.frame(svi=vSvi, key=eSvi $key)
dfrIpums $svi <- dfrSvi $svi[match(dfrIpums $SERIAL, dfrSvi $key)]

head(dfrIpums)
summary(dfrIpums $svi)
rstack <- rstack[[c('pop', 'ag', 'urb', 'nl', 'acc')]]
form <- svi~pop+urb+acc+nl


dfrIpums $MIG5INT <- as.numeric(dfrIpums $MIGRATE5==30)
dfrIpums $MIG5MAJ <- as.numeric(dfrIpums $MIGRATE5>19)

head(dfrIpums)
summary(dfrIpums $svi)
head(eSvi $pca)
head(eSvi $pca $pc)
summary(eSvi $pca $pc)
library(devtools)
devtools::load_all('/data/svi')
devtools::load_all('/data/ripums/')
source('R/krige.R')
ls()
Q
source('R/krige.R')
summary(m)
str(e $pca)
summary(e $pca $pc)
Q
devtools::load_all('/data/ripums/')
ls()
eSvi <- ripums::svi(quote(dfrIpums $COUNTRY==710), TRUE)
vSvi <- eSvi $pca $pc %*% eSvi $pca $vt[, 1]
summary(vSvi)
length(vSvi)
nrow(dfrIpums)
dfrSvi <- data.frame(svi=vSvi, key=eSvi $key)

summary(dfrSvi)
summary(dfrSvi[complete.cases(dfrSvi), ])
nrow(dfrSvi)
nrow(dfrSvi[complete.cases(dfrSvi), ])
dfrSvi <- dfrSvi[complete.cases(dfrSvi), ]
devtools::load_all('/data/ripums/')
dfrIpums $svi <- dfrSvi $svi[match(dfrIpums $SERIAL, dfrSvi $key)]
rstack <- rstack[[c('pop', 'ag', 'urb', 'nl', 'acc')]]
form <- svi~pop+urb+acc+nl


dfrIpums $MIG5INT <- as.numeric(dfrIpums $MIGRATE5==30)
dfrIpums $MIG5MAJ <- as.numeric(dfrIpums $MIGRATE5>19)



lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', 'PERWT', dfrGl2))

summary(dfrIpums)
nrow(dfrIpums)
nrow(dfrSvi)
dfrIpums <- dfrIpums[!is.na(dfrIpums $svi), ]
summary(dfrIpums)
lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', 'PERWT', dfrGl2))
qo
qu
quo
quoSvi <- quote(dfrIpums $COUNTRY==710)
xbar <- sapply(lWgt, function(dfrGl2) { # geolev2 weighted means
    weighted.mean(as.numeric(dfrGl2[, 'svi']), dfrGl2 $wtFreq, na.rm=TRUE)
})

spGl2 <- as(stGeolev2, 'Spatial')
library(sp)
spGl2 <- as(stGeolev2, 'Spatial')
stGeolev2
stGeolev2[stGeolev2 $CNTRY_CODE==710, ]
stGl2 <- stGeolev2[stGeolev2 $CNTRY_CODE==710, ]
spGl2 <- as(stGl2, 'Spatial')

stGl2
devtools::install_local('/data/ripums/', dependencies=FALSE, force=TRUE)
q()
n
library(parallel)
library(raster)
library(rgeos)
library(ripums) # devtools::load_all('/data/ripums')
library(rnaturalearth)

datadir <- file.path('tif', 'ZAF')
country <- 'South Africa'
quoSvi <- quote(dfrIpums $COUNTRY==710)

data(dfrIpums)
data(stGeolev2)
stGl2 <- stGeolev2[stGeolev2 $CNTRY_CODE==710, ]

spGl2 <- as(stGl2, 'Spatial')
library(sf)
spGl2 <- as(stGl2, 'Spatial')
mySf <- sf::st_read('/data/ripums/data-raw/world_geolev2/')
mySp <- as(mySf, 'Spatial')
q()
n
library(sf)
.libPaths()
q()
n
source('R/krige.R')
 traceback()
q()
n
library(rnaturalearth)
PHL <- rnaturalearth::ne_countries(country='Philippines')
PHL <- rnaturalearth::ne_countries(country='Philippines', returnclass='sf')
library(sf)
library(sp)
PHL
PHL <- as(PHL, 'Spatial')
PHL
data(stGeolev2)
library(ripums)
data(stGeolev2)
class(stGeolev2)
as(stGeolev2, 'Spatial')
stGeolev2
PHL
ls()
st_crs(stGeolev2)
PHL <- rnaturalearth::ne_countries(country='Philippines', returnclass='sf')
st_crs(PHL)
as(stGeolev2, 'Spatial')
traceback()
readOGR
library(sp)
readOGR
library(rgdal)
spGLB <- rgdal::readOGR('/data/ripums/data-raw/world_geolev2/world_geolev2.shp')
stGLB <- sf::st_as_sf(spGLB)
asSpGLB <- as(stGLB, 'Spatial')
ls()
q()
n
source('R/krige.R')
q()
n
list.files()
source('R/krige.R')
ls()
q()
n
source('R/krige.R')
q()
n
library(devtools)
devtools::load_all('/data/ripums')
source('R/krige.R')
q()
n
source('R/krige.R')
q()
n
source('R/krige.R')
source('R/krige.R')
q()
n
library(devtools)
devtools::load_all('/data/ripums')
source('R/krige.R')
xbarSrc <- aggregate(.~ID, dfrRex, FUN=mean, na.rm=TRUE)
head(dfrRex)
Q
q()
n
source('R/krige.R')
ls
ls()
spClip0
spClip0 $GEOLEVEL2
ls()
stGeolev2
stGeolev2[stGeolev2 $CNTRY_NAME='Philippines', ]
stGeolev2[stGeolev2 $CNTRY_NAME=='Philippines', ]
list.files()
source('R/resample.R')
install.pacakges('Rnightlights')
q()
n
list.files()
source('R/resample.R')
source('R/krige.R')
traceback()
ls()
q()
n
source('R/krige.R')
ls()
lR
paths
list.files('tif/PHL')
source('R/krige.R')
ls()
traceback()
ext
lExt
ext <- Reduce(raster::intersect, lExt)
ext
raster::intersect(lExt[[1]], lExt[[2]])
raster::intersect(raster::intersect(lExt[[1]], lExt[[2]]), lExt[[3]])
raster::intersect(raster::intersect(raster::intersect(lExt[[1]], lExt[[2]]), lExt[[3]]), lExt[[4]])
lExt[[4]]
paths
source('R/resample.R')
source('R/resample.R')
q()
n
source('R/krige.R')
ls()
q()
n
library(devtools)
source('R/krige.R')
krigeSvi <- ripums::krige(form, spClip0, rstack, vgm=gstat::vgm(0.003, 'Exp', 400, 0.003),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE)

Q
krigeSvi <- ripums::krige(form, spClip0, rstack, vgm=gstat::vgm(0.003, 'Exp', 400, 0.003),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE)
dfrRex2 <- dfrRex
ls()
ls()
save(src, spCells, dfrRex, dfrRex2, tgt, file='~/Desktop/krigeBrowser.RData')
ls()
ls()
Q
ls()
krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm(0.003, 'Exp', 400, 0.003),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE)

src2 <- src
dfr
dfrRex2 <- dfrRex
spCells2 <- spCells
list.files()
list.files('~/Desktop')
system('rm ~/Desktop/krigeBrowser.RData')
 ls()
save(src, src2, dfrRex, dfrRex2, dfrCells, spCells, spCells2, tgt, file='~/Desktop/browserKrige.RData')
form
y
X
src3 <- src2
src2 <- sp::merge(src3, xbarSrc, by='ID', all.x=FALSE)
save(src, src2, src3, dfrRex, dfrRex2, dfrCells, spCells, spCells2, tgt, file='~/Desktop/browserKrige.RData')
namesXbar
q()
n
source('R/krige.R')
rstack
length(rstack)
names(rstack)
source('R/krige.R')
q()
n
source('R/krige.R')
ls()
summary(iiNoMiss)
head(iiNoMIss[is.na(iiNoMiss $PERWT), ])
head(iiNoMiss[is.na(iiNoMiss $PERWT), ])
summary(ipumsPHL)
nrow(ipumsPHL)
nrow(iiNoMiss)
source('R/krige.R')
rstack
lLc
lR
rstack <- raster::stack(lR)

nRstack
rstack <- raster::stack(rstack, lLc[[1]], lLc[[2]] | lLc[[3]]) # note OR
rstack
names(rstack) <- c(nRstack, 'urban', 'ag')
rstack
rstack <- rstack[[c('ACC_Weiss_1k', 'NL_VIIRS_1k', 'POP_LandScan_1k', 'urban')]]
names(rstack) <- c('acc', 'nl', 'pop', 'urb')
form <- svi~acc+nl+pop+urb

lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', dfrGl2, 'PERWT'))
xbar <- sapply(lWgt, function(dfrGl2) { # geolev2 weighted means
    weighted.mean(as.numeric(dfrGl2[, 'svi']), dfrGl2 $wtFreq, na.rm=TRUE)
})

spGl2 $svi <- xbar[match(spGl2 $GEOLEVEL2, names(xbar))]


nnodes_ex <- c(rep('129.229.26.83', 28), rep('129.229.26.102', 6), rep('129.229.26.100', 2))
nnodes_vgm <- c(rep('129.229.26.83', 28), rep('129.229.26.102', 22), rep('129.229.26.100', 14))

krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm('Exp'),
                          nnodes_ex, nnodes_vgm, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE) # beta=beta

traceback()
form
spGl2
rstack
devtools::load_all('/data/ripums')
krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm('Exp'),
                          nnodes_ex, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE) # beta=beta
x
y
    if(gridded(x)) x <- as(x, "SpatialPolygons")
    if(gridded(y)) y <- as(y, "SpatialPolygons")

    stopifnot(is(x, "SpatialPolygons") || is(x, "SpatialPoints"))
    stopifnot(is(y, "SpatialPolygons") || is(y, "SpatialPoints"))
    stopifnot(is(vgm, "variogramModel"))

    nx <- length(x)
    ny <- length(y)

nx
v <- lapply(1:nx, function(i) { # outer loop
        if (is(x, "SpatialPolygons")) {
            px <- sp::spsample(x[i,], ndiscr, "regular", offset = c(.5,.5))
        } else px <- x[i,]
        sapply(1:ny, function(j) { # inner loop
            if (is(y, "SpatialPolygons")) {
                py <- sp::spsample(y[j,], ndiscr, "regular", offset = c(.5,.5))
            } else py <- y[j,]
            D <- sp::spDists(px, py)
            D[D == 0] <- 1e-10
            mean(gstat::variogramLine(vgm, dist_vector = D, covariance = covariance))
        })
    })

i
is(x, "SpatialPolygons")
px <- sp::spsample(x[1,], ndiscr, "regular", offset = c(.5,.5))
is(y, "SpatialPolygons")
py <- sp::spsample(y[j,], ndiscr, "regular", offset = c(.5,.5))
py <- sp::spsample(y[1,], ndiscr, "regular", offset = c(.5,.5))
D <- sp::spDists(px, py)
            D[D == 0] <- 1e-10
mean(gstat::variogramLine(vgm, dist_vector = D, covariance = covariance))
vgm
D
covariance
vgm
vgm2 <- gstat::vgm(1, 'Exp', 1, 1)
mean(gstat::variogramLine(vgm2, dist_vector = D, covariance = covariance))
vgm2 <- gstat::vgm(2, 'Exp', 300, 2)
mean(gstat::variogramLine(vgm2, dist_vector = D, covariance = covariance))
Q
ls()
gstat::vgm('Exp')
devtools::load_all('/data/ripums/')
krigeSvi <- ripums::krige(form, spGl2, rstack, vgm=gstat::vgm('Exp'),
                          nnodes_ex, master='129.229.26.83', homogeneous=FALSE,
                          computeVar=TRUE) # beta=beta
data
src
spCells
form
gstat::variogram(form, data=src)
v
v <- gstat::variogram(form, data=src)
vgm
gstat::fit.variogram(v, vgm)
v
Q
q()
n
source('R/krige.R')
ls()
krigeSvi
ls.str(krigeSvi)
q()
n
source('R/resample.R')
 source('R/krige.R')
ls()
load('~/Desktop/armstrong18/inst/RData/svi.PHL.RData')
ls()
krgSviPHL <- krigeSvi
save(krgSviPHL, '~/Desktop/armstrong18/inst/RData/svi.PHL.RData')
save(krgSviPHL, file='~/Desktop/armstrong18/inst/RData/svi.PHL.RData')
 source('R/krige.R')
list.files()
list.files('RData')
load(file.path(rdadir, 'svi.PHL.RData'))
 source('R/krige.R')
 source('R/krige.R')
load('RData/svi.PHL.RData')
ls()
 source('R/krige.R')
getwd()
 source('R/krige.R')
getwd()
list.files('RData/')
load(file.path(rdadir, 'krgSviPHL.RData'))
.Platform
 source('R/krige.R')
load(file.path(rdadir, 'krgSviPHL.RData'))

paths
lR
domain_var
head(iiMiss)
head(iiNoMiss)
rstack
rstack[[1]]
summary(values(rstack[[1]]))
head(xbar)
xbar
head(spGl2)
beta
ls.str(krgSviPHL)
krgSviPHL $beta
krgSviPHL $zHat $beta
beta <- krgSviPHL $zHat $beta
head(spGl2)
names(xbar)
spGl2 $svi <- xbar[match(spGl2 $GEOLEVEL2, names(xbar))]
head(spGl2)
head(iiNoMiss)
tail(iiNoMiss)
lWgt
head(dfrIpums)
eSvi <- ripums::svi(iiNoMiss)
vSvi <- eSvi $pca $pc %*% eSvi $pca $vt[, 1]
dfrSvi <- data.frame(svi=vSvi, key=eSvi $key)
dfrSvi <- dfrSvi[complete.cases(dfrSvi), ]
## dfrIpums <- merge(dfrIpums, dfrSvi, by.x='SERIAL', by.y='key')
dfrIpums $svi <- dfrSvi $svi[match(dfrIpums $SERIAL, dfrSvi $key)]

dfrIpums <- dfrIpums[!is.na(dfrIpums $svi), ]

## calculate migration
## dfrIpums $MIG5INT <- as.numeric(dfrIpums $MIGRATE5==30)
## dfrIpums $MIG5MAJ <- as.numeric(dfrIpums $MIGRATE5>19)

## setup model
rstack <- rstack[[c('ACC_Weiss_1k', 'NL_VIIRS_1k', 'POP_LandScan_1k', 'urban')]]
names(rstack) <- c('acc', 'nl', 'pop', 'urb')
form <- svi~acc+nl+pop+urb

## aggregate svi to geolevel 2
lWgt <- by(dfrIpums, dfrIpums $GEOLEV2, function(dfrGl2) weight('svi', dfrGl2, 'PERWT'))
xbar <- sapply(lWgt, function(dfrGl2) { # geolev2 weighted means
    weighted.mean(as.numeric(dfrGl2[, 'svi']), dfrGl2 $wtFreq, na.rm=TRUE)
})
## center & scale
## if(center) {
## xbarGrand <- weighted.mean(as.numeric(xbar[, 1]), xbar[, 2], na.rm=TRUE)
## xbar <- xbar - xbarGrand
## }
## if(scale) xbar <- xbar / sd(xbar)

spGl2 $svi <- xbar[match(spGl2 $GEOLEVEL2, names(xbar))]

rstack <- raster::stack(lR)

## make lc categories
## iLc <- unique(raster::values(rstack['lc']))
lc <- 'LC_Visnav_1k'
iLc <- c(6, 7, 8) # urban, ag-gen, ag-paddy
cl <- parallel::makeForkCluster(3)
lLc <- parallel::parLapply(cl, iLc, function(i) {
    r <- raster::mask(rstack[[lc]], rstack[[lc]]!=i, maskvalue=1, updatevalue=0)
    r==i ## do this directly and skip mask?
})
parallel::stopCluster(cl)

## stack rasters
nRstack <- names(rstack)
rstack <- raster::stack(rstack, lLc[[1]], lLc[[2]] | lLc[[3]]) # note OR
## c('acc', 'dem', 'lc', 'nl', 'pop', 'sl', 'so', 'tr', 'urb', 'ag')
names(rstack) <- c(nRstack, 'urban', 'ag')
## set missing values
acc <- 'ACC_Weiss_1k'
raster::values(rstack[[acc]])[raster::values(rstack[[acc]])==-9999] <- NA

